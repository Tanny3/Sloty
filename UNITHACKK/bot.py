import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from database import Database
import logging
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
class NotificationStates(StatesGroup):
    waiting_for_notification_text = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "7751476184:AAH9wSjVNpuJXAEiNdA4yLR0_si8JQR-R4k"
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database('database.db')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–°—Ç–∞—Ä—Ç"
def start_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="–°—Ç–∞—Ä—Ç")
    return builder.as_markup(resize_keyboard=True)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üë§ –£—á–∞—Å—Ç–Ω–∏–∫", callback_data="participant")
    builder.button(text="üõ†Ô∏è –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", callback_data="organizer")
    builder.button(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
    builder.button(text="‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about")
    builder.adjust(2)
    return builder.as_markup()

# –ú–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞
def participant_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üéØ –ó–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="event_registration")
    builder.button(text="üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="my_schedule")
    builder.button(text="üìç –ö–∞—Ä—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="event_map")
    builder.button(text="üìä –û–ø—Ä–æ—Å—ã –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", callback_data="polls")
    builder.button(text="üí¨ –ß–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="participants_chat")
    builder.button(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")
    builder.button(text="üîç FAQ", callback_data="faq")
    builder.button(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notifications")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.adjust(2)
    return builder.as_markup()

# –ú–µ–Ω—é –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
def events_menu_keyboard():
    events = db.get_all_events()
    builder = InlineKeyboardBuilder()
    for event in events:
        builder.button(text=event[1], callback_data=f"event_{event[0]}")  # event_<ID>
    builder.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_participant")
    builder.adjust(1)
    return builder.as_markup()

# –ú–µ–Ω—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
def organizer_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="schedule_settings")
    builder.button(text="üëÄ‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏", callback_data="attendance_control")
    builder.button(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="org_notifications")
    builder.button(text="üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="feedback")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.adjust(2)
    return builder.as_markup()

# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def schedule_settings_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="add_activity")
    builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="remove_activity")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_organizer")
    builder.adjust(1)
    return builder.as_markup()

class NewActivity(StatesGroup):
    waiting_for_data = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
@dp.callback_query(lambda c: c.data == "add_activity")
async def add_activity_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ|–î–∞—Ç–∞|–í—Ä–µ–º—è\n"
        "–ü—Ä–∏–º–µ—Ä: –ö–æ–Ω—Ü–µ—Ä—Ç|2024-05-25|18:00"
    )
    await state.set_state(NewActivity.waiting_for_data)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@dp.message(NewActivity.waiting_for_data)
async def process_activity_data(message: Message, state: FSMContext):
    try:
        name, date, time = message.text.split("|")
        db.add_event(name.strip(), date.strip(), time.strip())
        await message.answer(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ|–î–∞—Ç–∞|–í—Ä–µ–º—è")
    await state.clear()


# –ú–µ–Ω—é –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
def attendance_control_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")
    builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_stats")
    builder.button(text="üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="participants_list")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_organizer")
    builder.adjust(2)
    return builder.as_markup()

# –ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
def org_notifications_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data="send_to_all")
    builder.button(text="üë• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø–µ", callback_data="send_to_group")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_organizer")
    builder.adjust(1)
    return builder.as_markup()

# –ú–µ–Ω—é —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
def events_list_keyboard():
    events = db.get_all_events()
    builder = InlineKeyboardBuilder()
    for event in events:
        builder.button(text=event[1], callback_data=f"org_event_{event[0]}")
    builder.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_attendance")
    builder.adjust(1)
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    db.add_user(message.from_user.id, message.from_user.username)
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°—Ç–∞—Ä—Ç¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.",
        reply_markup=start_keyboard()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–°—Ç–∞—Ä—Ç"
    )
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç
@dp.message(lambda message: message.text == "–°—Ç–∞—Ä—Ç")
async def start_message(message: Message):
    welcome_text = """–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî —Ç–≤–æ–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!
‚ú® –ß—Ç–æ —è —É–º–µ—é:
üìÖ –î–µ—Ä–∂—É —Ç–µ–±—è –≤ –∫—É—Ä—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
üéü –ó–∞–ø–∏—Å—ã–≤–∞—é –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –∏ —É–≤–µ–¥–æ–º–ª—è—é –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
üí¨ –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–≥–∞—é —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏
üó≥ –ü—Ä–æ–≤–æ–∂—É –æ–ø—Ä–æ—Å—ã –∏ —Å–æ–±–∏—Ä–∞—é –º–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
üîí –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É—é –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –æ–ø—ã—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ —É–¥–æ–±–Ω—ã–º –∏ —è—Ä–∫–∏–º! üöÄ"""
    await message.answer(welcome_text, reply_markup=main_menu_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
@dp.callback_query(lambda c: c.data in ["participant", "organizer", "contacts", "about"])
async def main_menu_handler(callback: CallbackQuery):
    if callback.data == "participant":
        await callback.message.edit_text(
            "–ü—Ä–∏–≤–µ—Ç! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ "
            "–∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∏—á–µ–≥–æ –≤–∞–∂–Ω–æ–≥–æ üöÄ",
            reply_markup=participant_menu_keyboard()
        )
    elif callback.data == "organizer":
        if db.is_organizer(callback.from_user.id):
            await callback.message.edit_text(
                "–ü—Ä–∏–≤–µ—Ç! –¢—ã –≤–æ—à—ë–ª –∫–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä (–ª–µ–∫—Ç–æ—Ä). –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∏–Ω–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ? "
                "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ –¥–µ—Ç–∞–ª—è–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üìã\n\n"
                "–ï—Å–ª–∏ —Ç—ã –∑–∞—à–µ–ª –∫–∞–∫ –ª–µ–∫—Ç–æ—Ä, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                reply_markup=organizer_menu_keyboard()
            )
        else:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –í—ã –Ω–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä.", show_alert=True)
    elif callback.data == "about":
        await callback.message.edit_text(
            """<b>Naumen</b> ‚Äî —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –≤–µ–Ω–¥–æ—Ä –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ü–û –∏ –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π –∏ –æ—Ä–≥–∞–Ω–æ–≤ –≤–ª–∞—Å—Ç–∏, –ø—Ä–∏–∑–Ω–∞–Ω–Ω—ã–π –ª–∏–¥–µ—Ä –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö:

‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤
‚Ä¢ –ö–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
‚Ä¢ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ (–±–æ—Ç–æ–≤)
‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (BPM, low-code)
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏—è–º–∏ (KMS)
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–π —Å–∏–ª–æ–π (WFM)
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–¢-—Å–µ—Ä–≤–∏—Å–∞–º–∏ (ITSM)

–ö–æ–º–ø–∞–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ü–µ–Ω—Ç—Ä—ã –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –∏ –≥–∏–±–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –≤—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ low-code –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å–∏–ª–∞–º–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.

üåç –°–µ–≥–æ–¥–Ω—è —Ä–µ—à–µ–Ω–∏—è Naumen –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—è—Ç–∏ —Å—Ç—Ä–∞–Ω–∞—Ö, –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –æ—Ñ–∏—Å—ã –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã –∫–æ–º–ø–∞–Ω–∏–∏. –ë–æ–ª–µ–µ <b>200 –º–ª–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> –∏–∑ –†–æ—Å—Å–∏–∏, –ï–≤—Ä–æ–ø—ã –∏ –ê–∑–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç —Å —Ä–µ—à–µ–Ω–∏—è–º–∏ Naumen.""",
            reply_markup=main_menu_keyboard(),
            parse_mode="HTML"
        )
    elif callback.data == "contacts":
        await callback.message.edit_text(
            "–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤:\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\nEmail: example@example.com", 
            reply_markup=main_menu_keyboard()
        )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ FAQ



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥

@dp.callback_query(lambda c: c.data == "back_to_participant")
async def back_to_participant_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ú–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞:",
        reply_markup=participant_menu_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_participant")
async def back_to_participant_handler(callback: CallbackQuery):
    try:
        await callback.message.edit_text(
            "–ú–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞:",
            reply_markup=participant_menu_keyboard()
        )
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        logging.error(f"Back error: {e}")
    finally:
        await callback.answer()

def events_menu_keyboard():
    events = db.get_all_events()
    builder = InlineKeyboardBuilder()
    for event in events:
        builder.button(text=event[1], callback_data=f"event_{event[0]}")
    builder.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_participant")  # –í–∞–∂–Ω–æ!
    builder.adjust(1)
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞
@dp.callback_query(lambda c: c.data in ["event_registration", "my_schedule", "event_map", "polls", 
                                       "participants_chat", "ask_question", "faq", "notifications", "back_to_main"])
async def participant_menu_handler(callback: CallbackQuery):
    if callback.data == "event_registration":
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:", reply_markup=events_menu_keyboard())
    elif callback.data == "my_schedule":
        events = db.get_user_events(callback.from_user.id)
        if events:
            text = "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
            builder = InlineKeyboardBuilder()
            for event in events:
                text += f"- {event[1]} ({event[2]} –≤ {event[3]})\n"
                builder.button(text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {event[1]}", callback_data=f"unregister_{event[0]}")
            builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_participant")
            builder.adjust(1)
            await callback.message.edit_text(text, reply_markup=builder.as_markup())
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."
            await callback.message.edit_text(text, reply_markup=participant_menu_keyboard())
    elif callback.data == "event_map":
        await callback.message.answer_photo(photo=types.FSInputFile("map.jpg"), caption="–ö–∞—Ä—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
        await callback.answer()
    elif callback.data == "participants_chat":
        await callback.message.edit_text("–ß–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: https://t.me/+9QfxMYoYHBkzNTUy", 
                                        reply_markup=participant_menu_keyboard())
    elif callback.data == "ask_question":
        await callback.message.edit_text(
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ: https://t.me/+9QfxMYoYHBkzNTUy\n\n"
            "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∑–¥–µ—Å—å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.",
            reply_markup=participant_menu_keyboard()
        )
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    elif callback.data == "notifications":
        notifications = db.get_user_notifications(callback.from_user.id)
        if notifications:
            text = "–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
            for note in notifications:
                text += f"- {note[1]}\n"
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
        await callback.message.edit_text(text, reply_markup=participant_menu_keyboard())
    elif callback.data == "back_to_main":
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π)
@dp.callback_query(lambda c: c.data.startswith("event_"))
async def select_event(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[1])
    event = db.get_event(event_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    
    if not event:
        await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º event_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(event_id=event_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
    event_details = (
        f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {event[1]}\n"
        f"üìÖ –î–∞—Ç–∞: {event[2]}\n"
        f"‚è∞ –í—Ä–µ–º—è: {event[3]}\n"
        f"üî¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {10 - db.get_event_participants_count(event_id)}"  # –ü—Ä–∏–º–µ—Ä: 10 - —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"confirm_{event_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_registration")
    builder.adjust(1)

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n\n{event_details}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏


@dp.callback_query(lambda c: c.data.startswith("unregister_"))
async def unregister_from_event(callback: CallbackQuery):
    event_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    if db.unregister_user_from_event(user_id, event_id):
        await callback.message.edit_text(
            "‚úÖ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.",
            reply_markup=participant_menu_keyboard()
        )
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã.", show_alert=True)
    await callback.answer()

# –°—Ç–∞—Ä—Ç




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
@dp.callback_query(lambda c: c.data.startswith("confirm_"))
async def confirm_registration(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    if db.is_user_registered(user_id, event_id):
        await callback.answer("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!", show_alert=True)
        return

    db.register_user_to_event(user_id, event_id)
    count = db.get_event_participants_count(event_id)
    
    await callback.message.edit_text(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!\n–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}",
        reply_markup=events_menu_keyboard()  # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    )
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@dp.callback_query(lambda c: c.data == "cancel_registration")
async def cancel_registration(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=events_menu_keyboard()  # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    )
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
@dp.callback_query(lambda c: c.data in ["schedule_settings", "attendance_control", "org_notifications", 
                                       "feedback", "back_to_organizer"])
async def organizer_menu_handler(callback: CallbackQuery):
    if callback.data == "schedule_settings":
        await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=schedule_settings_keyboard())
    elif callback.data == "attendance_control":
        await callback.message.edit_text("–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:", reply_markup=attendance_control_keyboard())
    elif callback.data == "org_notifications":
        await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:", reply_markup=org_notifications_keyboard())
    elif callback.data == "feedback":
        await callback.message.edit_text("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞.")
    elif callback.data == "back_to_organizer":
        await callback.message.edit_text("–ú–µ–Ω—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:", reply_markup=organizer_menu_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.callback_query(lambda c: c.data in ["add_activity", "remove_activity", "back_to_organizer"])
async def schedule_settings_handler(callback: CallbackQuery):
    if callback.data == "add_activity":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ|–î–∞—Ç–∞|–í—Ä–µ–º—è")
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    elif callback.data == "remove_activity":
        events = db.get_all_events()
        if events:
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=events_list_keyboard())
        else:
            await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
    elif callback.data == "back_to_organizer":
        await callback.message.edit_text("–ú–µ–Ω—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:", reply_markup=organizer_menu_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
@dp.callback_query(lambda c: c.data in ["statistics", "refresh_stats", "participants_list", "back_to_attendance"])
async def attendance_control_handler(callback: CallbackQuery):
    if callback.data in ["statistics", "refresh_stats"]:
        stats = db.get_events_stats()
        text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:\n"
        for stat in stats:
            text += f"- {stat[0]}: {stat[1]} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        await callback.message.edit_text(text, reply_markup=attendance_control_keyboard())
    elif callback.data == "participants_list":
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", 
                                       reply_markup=events_list_keyboard())
    elif callback.data == "back_to_attendance":
        await callback.message.edit_text("–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:", reply_markup=attendance_control_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@dp.callback_query(lambda c: c.data.startswith("org_event_"))
async def event_participants_handler(callback: CallbackQuery):
    event_id = int(callback.data.split("_")[2])
    participants = db.get_event_participants(event_id)
    if participants:
        text = "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n"
        for user in participants:
            text += f"- @{user[1]}\n"
    else:
        text = "–ù–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è."
    await callback.message.edit_text(text, reply_markup=events_list_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
@dp.callback_query(lambda c: c.data in ["send_to_all", "send_to_group", "back_to_organizer"])
async def org_notifications_handler(callback: CallbackQuery):
    if callback.data == "send_to_all":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    elif callback.data == "send_to_group":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã:")
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    elif callback.data == "back_to_organizer":
        await callback.message.edit_text("–ú–µ–Ω—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:", reply_markup=organizer_menu_keyboard())
    await callback.answer()




# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())